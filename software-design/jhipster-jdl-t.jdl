entity AdjustTokens {
	name String,
    description TextBlob,
    token Double,
    price Double,
    image ImageBlob
}

entity AdjustPrice {
	name String,
    option PurchaseOption,
    token Double,
    price Double
}

enum PurchaseOption {
	PROGRAM,
    NUTRITION,
    FITNESS
}

entity ShopingItem {
	name String,
    description TextBlob,
    token Double,
    price Double,
    image ImageBlob,
    orderable Boolean
}

entity AdjustShopingItem {
	name String,
    description TextBlob,
    token Double,
    price Double,
    image ImageBlob,
    orderable Boolean
}

entity OrderItem {
    number String,
}

entity Order {
	username String,
    firstName String,
    lastName String,
    phoneNumber String,
    email String,
    country String,
    state String,
    city String,
    address1 String,
    address2 String,
    done Boolean,
    paid Boolean,
    received Boolean
}

relationship OneToMany {
	Order{orderItem} to OrderItem{item}
}

relationship OneToOne {
	OrderItem{items} to ShopingItem{orderItem}
}

entity AdjustClient {
	username String,
	firstName String,
    lastName String,
    birthDate LocalDate,
    age Integer,
    gender Gender,
	token Double,
    score Double,
    image ImageBlob
}

entity Specialist {
	username String,
	firstName String,
    lastName String,
    birth LocalDate,
    gender Gender,
    degree String,
    field String,
    resume TextBlob,
	stars Double,
    image ImageBlob,
    busy Boolean
}

enum Gender {
	 MALE,
     FEMALE
}

entity AdjustProgram {
	createdAt LocalDate,
    expirationDate LocalDate,
    designed Boolean,
    medicalProfileDone Boolean,
    nutritionDone Boolean,
    fitnessDone Boolean,
    paid Boolean,
    seenByClient Boolean,
    seenBySpecialist Boolean,
}

entity ProgramDescription {
	text String,
    type ProgramType,
}

enum ProgramType {
	NUTRITION,
    FITNESS
}

entity ProgramDevelopment {
	date LocalDate,
    nutritionScore Double,
    fitnessScore Double,
}

entity MedicalProfile {
	createdAt LocalDate,
    height Double,
    weight Double,
    wrist Double,
    waist Double,
    hip Double,
    neck Double,
  	waistHipRatio Double,
    bmi Double,
    bmr Double,
    lbm Double,
    pbf Double,
    idealWeight Double,
    healthyWeight Double,
    frameSize Double,
    bmiCategory BMICategory,
    bodyFrameSize BodyFrameSize,
    muscleMassPercentage Double,
    fatMassPercentage Double,
    visceralFatLevel Double,
    activityType ActivityType,
    gender Gender,
    age Integer,
    maritalStatus MaritalStatus,
    childrenNumber Integer,
    education Education,
    occupation Occupation,
    hoursOfWorkDaily Integer,
    financialStatus FinancialStatus,
    country String,
    city String,
    motive Motive,
    useOfMedicine Boolean,
    medicine String,
    haveAllergy Boolean,
    allergy String,
    haveDisease Boolean,
    bloodType BloodType,
    workoutLocation WorkoutLocation,
}

enum BodyFrameSize {
	SMALL,
    MEDIUM,
    LARGE
}

enum BMICategory {
	UNDERWEIGHT,
    NORMAL,
    OVERWEIGHT,
    OBESE,
    HIGHOBESE,
    EXTRAOBESE
}

enum BloodType {
	A,
    B,
    AB,
    O
}

entity Disease {
	name String,
    proteinPercentage Double,
    carbsPercentage Double,
    fatPercentage Double,
    adjustDiseaseId Long,
}

entity AdjustDisease {
	name String,
    proteinPercentage Double,
    carbsPercentage Double,
    fatPercentage Double,
    adjustDiseaseId Long,
}

relationship OneToMany {
	MedicalProfile{diseases} to Disease{medicalProfile}
}

enum Motive {
	DECREASEWEIGHT,
    INCREASEWEIGHT
}

enum FinancialStatus {
	BAD,
    NORMAL,
    GOOD,
    PERFECT
}

enum Occupation {
	NONE,
    STUDENT,
    FREELANCER,
  	LABOR,
    EMPLOYEE,
    MEDICAL,
    ENGINEERING,
    MANAGER,
    HOUSEWIFE,
    OTHERS
}

enum Education {
	NONE,
	LOW,
    DIPLOMA,
    BACHELOR,
    MASTERS,
    DOCTORATE
}

entity BodyImage {
	title String,
  	bodyImage ImageBlob,
}

relationship OneToMany {
	MedicalProfile{bodyImages} to BodyImage{medicalProfile}
}

entity BodyCompositionImage {
	title String,
    bodyCompositionImage ImageBlob,
}

relationship OneToMany {
	MedicalProfile{bodyCompositionImages} to BodyCompositionImage{medicalProfile}
}

entity BloodTestImage {
	title String,
    bloodTestImage ImageBlob,
}

relationship OneToMany {
	MedicalProfile{bloodTestImages} to BloodTestImage{medicalProfile}
}

enum ActivityType {
	SEDENTARY,
    LIGHT,
    MODERATE,
    HIGH,
    EXTRA
}

enum MaritalStatus {
	Married,
    Single
}

//fitness program

entity FitnessProgram {
	type String,
    description TextBlob,
}

entity Workout {
	dayNumber Integer,
}

entity Exercise {
	number Integer,
    sets Integer,
    repsMin Integer,
    repsMax Integer,
	adjustMoveId Long,
}


entity AdjustMove {
    name String,
    description TextBlob,
    muscleName String,
    muscleType MoveType,
    place WorkoutLocation,
    equipment String,
    picture ImageBlob,
}

enum WorkoutLocation {
	HOME,
    GYM
}

enum MoveType {
	CHEST,
    SHOULDER,
    TRAPEZOID,
    BACK,
    LATERAL,
    BICEP,
    TRICEP,
    FOREARM,
    LEG,
    HAMSTRING,
    GLUTES,
    CALVES,
    ABS,
    AEROBICS,
    TRX,
    MULTIMUSCLE,
    MISC
}

//nutrition program

entity NutritionProgram {
	dailyCalories Double,
    proteinPercentage Integer,
    carbsPercentage Integer,
    fatPercentage Integer,
    description TextBlob,
}

entity Meal {
	mealType MealType,
    number Integer,
}

enum MealType {
	BREAKFAST,
    LUNCH,
    DINNER,
    BRUNCH,
    EVEMEAL,
    AFTERNOONMEAL,
  	MIDNIGHTSUPPER,
    IFTAR,
  	SNACK1,
    SNACK2,
    SNACK3,
    SNACK4,
    SNACK5,
    SNACK6
}

entity Nutrition {
	name String,
    description TextBlob,
    unit Integer,
    adjustNutritionId Long,
    minUnitLow Integer,
    minUnitNormal Integer,
    minUnitMax Integer,
    caloryBoundryMin Integer,
    caloryBoundryMax Integer,
    caloriesPerUnit Integer,
    proteinPerUnit Integer,
    carbsPerUnit Integer,
    fatInUnit Integer,
}

entity AdjustNutrition {
	name String,
    description TextBlob,
    unit Integer,
    adjustNutritionId Long,
    minUnitLow Integer,
    minUnitNormal Integer,
    minUnitMax Integer,
    caloryBoundryMin Integer,
    caloryBoundryMax Integer,
    caloriesPerUnit Integer,
    proteinPerUnit Integer,
    carbsPerUnit Integer,
    fatInUnit Integer,
}

entity AdjustFood {
	name String,
    description String,
}

relationship OneToMany {
	Meal{nutritions} to Nutrition{meal}
}

relationship OneToMany {
	AdjustNutrition{foods} to AdjustFood{nutrition}
}

//chat 
entity Conversation {
	clientId Long,
	specialistId Long,
}

entity ChatMessage {
	clientId Long,
    clientUsername String,
    specialistId Long,
    specialistUsername String,
    sender String,
    receiver String,
    text TextBlob,
    image ImageBlob,
    voice AnyBlob,
    seen Boolean,
}


relationship OneToMany {
	Conversation{messages} to ChatMessage{conversation}
}

// tutorial

entity Course {
	title String,
    description TextBlob,
}

entity Tutorial {
	title String,
    description String,
    text TextBlob,
    thumbnail ImageBlob,
    tokenPrice Double,
    adjustTutorialId Long,
    
}

entity AdjustTutorial {
	title String,
    description String,
    text TextBlob,
    thumbnail ImageBlob,
    tokenPrice Double,
}


entity AdjustTutorialVideo {
	content AnyBlob
}

entity TutorialVideo {
	adjustTutorialVideoId Long,
	content AnyBlob
}

relationship OneToMany {
	Course{tutorials} to Tutorial{course}
}

relationship OneToOne {
	Tutorial{video} to TutorialVideo{tutorial}
}

relationship OneToOne {
	AdjustTutorial{video} to AdjustTutorialVideo{tutorial}
}

relationship OneToMany {
	AdjustClient{tutorials} to Tutorial{client}
}

relationship OneToMany {
	AdjustProgram{programDevelopments} to ProgramDevelopment{adjustProgram}
}

relationship OneToOne {
	AdjustProgram{medicalProfiles} to MedicalProfile{program}
}

relationship OneToMany {
	AdjustClient{programs} to AdjustProgram{client}
}

relationship OneToMany {
	Specialist{programs} to AdjustProgram{specialist}
}

relationship OneToOne {
	AdjustProgram{fitnessProgram} to FitnessProgram{program}
}

relationship OneToOne {
	AdjustProgram{nutritionProgram} to NutritionProgram{program}
}

relationship OneToMany {
	FitnessProgram{workouts} to Workout{program}
}

relationship OneToMany {
	Workout{exercises} to Exercise{workout}
}

relationship OneToMany {
	NutritionProgram{meals} to Meal{nutritionProgram}
}

service all with serviceClass
dto * with mapstruct
